/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.zhurovhw26.dao.abstracts;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * Abstract class working with different databases: MySQL, H2, MongoDB It will
 * be better create 2 new classes: AbstractDAORelationalDatabase and
 * AbstractDAONonRelationalDatabase, cause work with MongoDB is not perfect
 *
 */
public abstract class AbstractDAODatabase<T> extends AbstractDAO<T> {

    private final String url;
    private final String user;
    private final String pass;
    private final String driver;
    private volatile Statement statement = null;
    protected volatile Connection connection;

    public AbstractDAODatabase(String url, String user, String pass, String driver) {
        this.url = url;
        this.user = user;
        this.pass = pass;
        this.driver = driver;
    }

    @Override
    public T getOneById(long id) {
        return null;
    }

    @Override
    public void getConnection() {

        if (connection == null) {
            synchronized (this) {
                try {
                    Class.forName(driver);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AbstractDAODatabase.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    connection = DriverManager.getConnection(url, user, pass);
                } catch (SQLException ex) {
                    Logger.getLogger(AbstractDAODatabase.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    @Override
    public void closeConnection() {

        try {
            if (connection != null) {
                connection.close();
            }
            if (statement != null) {
                statement.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(AbstractDAODatabase.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public Statement getStatement() {

        try {
            statement = connection.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(AbstractDAODatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        return statement;
    }

    public PreparedStatement getPreparedStatement(String query) {

        try {
            statement = connection.prepareStatement(query);
            return (PreparedStatement) statement;
        } catch (SQLException ex) {
            Logger.getLogger(AbstractDAODatabase.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;

    }

    public PreparedStatement getPreparedStatement(String query, int autoGeneratedKeys) {

        try {
            statement = connection.prepareStatement(query, autoGeneratedKeys);
            return (PreparedStatement) statement;
        } catch (SQLException ex) {
            Logger.getLogger(AbstractDAODatabase.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

}
